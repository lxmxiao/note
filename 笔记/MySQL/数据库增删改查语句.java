//查看数据库
	show databases;
//使用数据库
	use 数据库名;
//创建数据库
	CREATE DATABASE 数据库名;
//删除数据库
	DROP DATABASE 数据库名;
//创建表
	create table 表名(
		列名1 类型(长度)[约数],
		列名2 类型(长度)[约数],
		...
	);
	//追加列
		alter table 表名 add (列名 类型);
		//插入数据
			insert into 表名 value(列1数据,列2数据);
//修改表
	//修改列名
		alter table 表名 change 列名 新列名 类型;
	//修改列类型
		alter table 表名 change 列名 列名 新类型;
	//修改列类型
		alter table 表名 modify 列名 新类型;
	//修改默认值default
		alter table 表名 alter column 列名 set default 默认值;
		//修改表中的数据
			update 表名 set 列名=值 [where 行名]    //WHERE子句指定应更新哪些行。如没有WHERE子句，则更新所有的行
//删除表
	DROP TABLE 表名;
	//删除数据
		//不使用where,则将删除表中所有的数据
		//delete语句不能删除某一列的值，删除的单位是行
		delete from 表名 [where 行名]    
//表约束
	1.非空约束		NOT NULL
	2.默认值约束	DEFAULT '男'
	3.唯一约束		UNIQUE
	4.主键约束		PRIMARY KEY
//查看表结构
	DESC 表名

--------------------------------数据查询 单表--------------------------------------------
//查询表中全部信息
	select * from 表名
	//查询表中指定列的信息
		select 列1, 列2 from 表名;			//语句执行顺序：from --> select
	//数据去重
		select distinct 列... from 表名;
	//拼接结果
		select concat(列1,列2) from 表名;
	/*运算符优先级：
	1.乘法和除法的优先级高于加法和减法
	2.同级运算的顺序是从左到右
	3.表达式中使用"括号"可强行改变优先级的运算顺序*/
		select 列1[+-*/]列2 from 表名;
	//设置别名(关键字as可以省略)
		select 列 as 别名 from 表名;
		select 列 别名 from 表名;			//语句的执行顺序：from—>select
	//计算字段
		//计算后的字段也可以直接起一个别名
		select 列名1,列名2+列名3+列名4 from 表名         	//显示的结果为：列名1    列名2+列名3+列名4
		select 列名1,列名2+列名3+列名4 as sum from 表名		//显示的结果为：列名1    sum
	//条件查询
		select 列... from 表名 where 条件;
		//条件中比较运算符：( 等于:=  大于:>  大于等于:>=  小于:<  小于等于:<=  不等于:!= 或 <>  )
			where 列 比较运算符 值;				//注意:字符串、日期需使用单引号括起来,语句的执行顺序：from—>where—>select
		//逻辑运算符( 并且:and 或 &&   或:or    非:not 或 !    )
			where 条件1  逻辑运算符  条件2;  
			where not 条件; 
		//范围查询
			where 列 between 条件1  and 条件2;          //列在这个区间的值
			where 列 not between 条件1 and 条件2;    	//不在这个区间
			where !( 列 between 条件1 and 条件2 );     //同样表示不在这个区间
		//集合查询( 判断列的值是否在指定的集合中 )
			where 列 in(值1,值2);         				 //列中的数据是in后的值里面的
			where 列 not in(值1,值2);   				//不是in中指定值的数据
		//NULL值查询( 注意：列中值为null不能使用=去查询 )
			where 列 is null;  							//查询列中值为null的数据
		//模糊查询，%：表示0到多个字符，示例：	
			where 列 like '%0';   						//表示以0结尾
			where 列 like  '0%';   						//表示以0开头
			where 列 like  '%0%';   					//表示数据中包含0
		//_：表示一个字符，可多次使用，示例：
			where 列 like '%0_';   						//数据结尾第二位是0
		//查询不包含某字符的数据
			where 列 not like '%o%';
		//结果排序( 对查询出的结果按照一列或多列进行升序还是降序排列 升序:asc  降序:desc    注意：不能使用中文的别名排序)
			where 条件 order by 列 [asc/desc]			//语句的执行顺序：from—>where—>select—>order by
		//筛选排序(对多列进行排序)
			where 条件 order by 列1 [asc/desc], 列2 [asc/desc]...       //先以列1进行排序，然后以列2进行排序
		//分页查询( offset:表示从第多少条数据开始   nums:表示每页显示的数据条数 )
			where [条件] limit nums Offset offset;
		//聚集函数( 作用于一组数据，并对一组数据返回一个值 )
			COUNT:统计结果记录数，若统计的是列，列中为Null，那么count将不会计算值
			MAX:  统计计算最大值
			MIN:  统计计算最小值
			SUM:  统计计算求和
			AVG:  统计计算平均值
		//分组函数( 注意：如果要对分组后的数据进行筛选，那么必须使用having关键字，条件写在having后 )
			select 聚集函数 from 表名 where [条件] group by 列 having 分组后的条件
			//分组后重叠数据可用以下语句显示
			group_concat(列名)
			//语句的执行顺序：FROM—> WHERE—>group by---->Having—>SELECT-->ORDER BY

--------------------------------数据查询 多表--------------------------------------------
//交叉连接:又名笛卡尔积，使用交叉连接会产生笛卡尔积
	select *  from 表1,表2
	//内连接：过滤为空的数据(查询的实际上是两张表数据的交集部分)
	select * from 表1,表2  where 表1.字段=表2.字段;  //隐式内连接,使用where条件消除笛卡尔积
	select * from 表1 [inner] join 表2 on 表1.字段=表2.字段;  //显式内连接,如果是多张表，则一直在join..on后依次添加join..on即可,inner关键字可被省略
	//外连接：左外连接、右外连接、全外连接
		//左外连接:以左边表为主，返回左边表中所有数据，若右表中无数据，则显示NULL
		select * from 表1 left [outer] join 表2 on 表1.字段=表2.字段;   //表1为左表，表2为右表,outer关键字可被省略
		//右外连接：以右边表为主，返回右表中所有数据，若左表中无数据，则显示为NULL
	//子查询：将一个查询结果作为另一个查询的对象，直白的讲就是SQL语句嵌套
	select * from (select * from 表名) as 别名
	select * from where 条件->条件中包含查询语句
	注意： 1.查询结果的虚拟表必须取别名
           2.字段与关键字一样，冲突时，需要给字段名加``,(Esc键下面、1的左边)
           3.如果给虚拟结果表中的字段取了别名，则对虚拟结果表查询时，应该用 表别名.虚拟表字段别名


--------------------------------插入数据--------------------------------------------
	//字段中插入数据
	insert into 表名(字段1，字段2..) value(值1，值2...);
	注意： 1.如果插入的表中的主键是自增类型的，可以不用插入值
            2.如果主键是非自增 ，插入的数据则是填补主键字段值空余的值
            3.如果主键设置了自动递增，会从主键字段最大值开始插入数据
	//其他插入方式
	insert into 表名(字段1,字段2) values(值1,值2),(值1,值2);     //插入多条数据【MYSQL】
	insert into 表名 values(值1,值2);                    //针对全表所有字段进行插入操作
	insert into 表名(字段) select 字段 from 表2;         //查询结果插入
	insert into 表名 select 字段 from 表2;               //查询结果，全表插入

--------------------------------修改数据--------------------------------------------
	//带条件修改指定数据，否则修改全表
	update 表名 set 字段=值 where 条件; 		

--------------------------------删除数据--------------------------------------------
	//带条件删除指定数据，否则删除全表数据
	delete from 表名 where 条件;
	
--------------------------------数据索引----------------------------------------------------------------------------------------
//索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。
	/*什么列适合建索引？？
	1.表的主键、外键必须有索引；
	2.数据量超过30000的表应该有索引；
	3.经常与其他表进行连接的表，在连接字段上应该建立索引；
	4.经常出现在Where子句中的字段，特别是大表的字段，应该建立索引；
	5.索引应该建在选择性高的字段上；
	6.索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引； 
	*/
	//创建索引
	create index 索引名称 on 表名(列名)
	//删除索引
		//方式一
		drop index 索引名 on 表名
		//方式二
		alter table 表名 drop index 索引名
